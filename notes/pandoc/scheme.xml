<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
  <!ENTITY xmlattrs "\s+([^&quot;/>]++|&quot;[^&quot;]*+&quot;)*+">
  <!ENTITY tab      "&#009;">
  <!ENTITY regex    "(?:[^\\(\[/]++|\\.|\[\^?\]?([^\\\[\]]++|\\.|\[(:[^:]+:\])?)++\]|\((?R)\))+">

  <!ENTITY initial_ascii_set "a-zA-Z!$&#37;&amp;*/:&lt;=&gt;?~_^">
  <!ENTITY initial_unicode_set "\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Mn}\p{Nl}\p{No}\p{Pd}\p{Pc}\p{Po}\p{Sc}\p{Sm}\p{Sk}\p{So}\p{Co}">
  <!ENTITY initial_others "\\x[0-9a-fA-F]++;|(?![\x01-\x7f])[&initial_unicode_set;]">
  <!ENTITY initial "(?:[&initial_ascii_set;]|&initial_others;)">
  <!ENTITY subsequent "(?:[&initial_ascii_set;0-9-@.+\p{Nd}\p{Mc}\p{Me}]|&initial_others;)">
  <!ENTITY symbol "(?:&initial;&subsequent;*+)">
]>
<language name="Scheme" mimetype="text/x-scheme" author="Dominik Haumann (dhaumann@kde.org)" license="MIT">
  <highlighting>
    <list name="operators">
      <item>&lt;=</item>
      <item>&lt;</item>
      <item>=</item>
      <item>=&gt;</item>
      <item>&gt;=</item>
      <item>&gt;</item>
      <item>-</item>
      <item>/</item>
      <item>+</item>
      <item>!</item>
      <item>*</item>
      <item>/</item>
      <item>=</item>
      <item>></item>
    </list>
    <list name="characters">
      <item>alarm</item>
      <item>backspace</item>
      <item>delete</item>
      <item>esc</item>
      <item>linefeed</item>
      <item>newline</item>
      <item>page</item>
      <item>return</item>
      <item>space</item>
      <item>tab</item>
      <item>vtab</item>
    </list>
    <list name="syntax">
      <item>and</item>
      <item>assert</item>
      <item>begin</item>
      <item>case</item>
      <item>catch</item>
      <item>cond</item>
      <item>cons-stream</item>
      <item>define-record-type</item>
      <item>define-syntax</item>
      <item>define</item>
      <item>delay</item>
      <item>else</item>
      <item>if</item>
      <item>lambda</item>
      <item>let-syntax</item>
      <item>let-values</item>
      <item>let*-values</item>
      <item>let*</item>
      <item>let</item>
      <item>letrec-syntax</item>
      <item>letrec*</item>
      <item>letrec</item>
      <item>or</item>
      <item>quasiquote</item>
      <item>quasisyntax</item>
      <item>quote</item>
      <item>raise-continuable</item>
      <item>raise</item>
      <item>set!</item>
      <item>syntax-case</item>
      <item>syntax-rules</item>
      <item>unquote-splicing</item>
      <item>unquote</item>
      <item>unsyntax-splicing</item>
      <item>unsyntax</item>
      <item>with-eval</item>
    </list>
    <list name="builtins">
      <item>1+</item>
      <item>-1+</item>
      <item>abs</item>
      <item>acos</item>
      <item>angle</item>
      <item>append</item>
      <item>asin</item>
      <item>assoc</item>
      <item>assp</item>
      <item>assq</item>
      <item>assv</item>
      <item>atan</item>
      <item>bitwise-and</item>
      <item>bitwise-arithmetic-shift-left</item>
      <item>bitwise-arithmetic-shift-right</item>
      <item>bitwise-arithmetic-shift</item>
      <item>bitwise-bit-count</item>
      <item>bitwise-bit-field</item>
      <item>bitwise-bit-set?</item>
      <item>bitwise-copy-bit-field</item>
      <item>bitwise-copy-bit</item>
      <item>bitwise-first-bit-set</item>
      <item>bitwise-if</item>
      <item>bitwise-ior</item>
      <item>bitwise-length</item>
      <item>bitwise-not</item>
      <item>bitwise-reverse-bit-field</item>
      <item>bitwise-rotate-bit-field</item>
      <item>bitwise-xor</item>
      <item>boolean?</item>
      <item>boolean=?</item>
      <item>bound-identifier=?</item>
      <item>caaaar</item>
      <item>caaadr</item>
      <item>caaar</item>
      <item>caadar</item>
      <item>caaddr</item>
      <item>caadr</item>
      <item>caar</item>
      <item>cadaar</item>
      <item>cadadr</item>
      <item>cadar</item>
      <item>caddar</item>
      <item>cadddr</item>
      <item>caddr</item>
      <item>cadr</item>
      <item>call-with-bytevector-output-port</item>
      <item>call-with-current-continuation</item>
      <item>call-with-input-file</item>
      <item>call-with-output-file</item>
      <item>call-with-port</item>
      <item>call-with-string-output-port</item>
      <item>call-with-values</item>
      <item>call/cc</item>
      <item>car</item>
      <item>cdaaar</item>
      <item>cdaadr</item>
      <item>cdaar</item>
      <item>cdadar</item>
      <item>cdaddr</item>
      <item>cdadr</item>
      <item>cdar</item>
      <item>cddaar</item>
      <item>cddadr</item>
      <item>cddar</item>
      <item>cdddar</item>
      <item>cddddr</item>
      <item>cdddr</item>
      <item>cddr</item>
      <item>cdr</item>
      <item>ceiling</item>
      <item>char-&gt;integer</item>
      <item>char-alphabetic?</item>
      <item>char-ci&gt;?</item>
      <item>char-ci&gt;=?</item>
      <item>char-ci&lt;?</item>
      <item>char-ci&lt;=?</item>
      <item>char-ci=?</item>
      <item>char-downcase</item>
      <item>char-foldcase</item>
      <item>char-general-category</item>
      <item>char-lower-case?</item>
      <item>char-numeric?</item>
      <item>char-ready?</item>
      <item>char-title-case?</item>
      <item>char-titlecase</item>
      <item>char-upcase</item>
      <item>char-upper-case?</item>
      <item>char-whitespace?</item>
      <item>char?</item>
      <item>char&gt;?</item>
      <item>char&gt;=?</item>
      <item>char&lt;?</item>
      <item>char&lt;?c</item>
      <item>char&lt;=?</item>
      <item>char=?</item>
      <item>complex?</item>
      <item>condition-accessor</item>
      <item>condition-irritants</item>
      <item>condition-message</item>
      <item>condition-predicate</item>
      <item>condition-who</item>
      <item>condition?</item>
      <item>condition</item>
      <item>cons</item>
      <item>cos</item>
      <item>current-error-port</item>
      <item>current-input-port</item>
      <item>current-output-port</item>
      <item>datum-&gt;syntax</item>
      <item>denominator</item>
      <item>display</item>
      <item>div-and-mod</item>
      <item>div</item>
      <item>div0-and-mod0</item>
      <item>div0</item>
      <item>eq?</item>
      <item>equal-hash</item>
      <item>equal?</item>
      <item>eqv?</item>
      <item>error?</item>
      <item>error</item>
      <item>eval</item>
      <item>even?</item>
      <item>exact-&gt;inexact</item>
      <item>exact->inexact</item>
      <item>exact-integer-sqrt</item>
      <item>exact?</item>
      <item>exact</item>
      <!-- Don't highlight this since we use it for expression parameters. -->
      <!-- <item>exp</item> -->
      <item>expt</item>
      <item>filter</item>
      <item>find</item>
      <item>finite?</item>
      <item>fixnum-width</item>
      <item>fixnum?</item>
      <item>floor</item>
      <item>for-each</item>
      <item>force</item>
      <item>free-identifier=?</item>
      <item>fx-/carry</item>
      <item>fx-</item>
      <item>fx*/carry</item>
      <item>fx*</item>
      <item>fx&gt;?</item>
      <item>fx&gt;=?</item>
      <item>fx&lt;?</item>
      <item>fx&lt;=?</item>
      <item>fx+/carry</item>
      <item>fx+</item>
      <item>fx=?</item>
      <item>fxand</item>
      <item>fxarithmetic-shift-left</item>
      <item>fxarithmetic-shift-right</item>
      <item>fxarithmetic-shift</item>
      <item>fxbit-count</item>
      <item>fxbit-field</item>
      <item>fxbit-set?</item>
      <item>fxcopy-bit-field</item>
      <item>fxcopy-bit</item>
      <item>fxdiv-and-mod</item>
      <item>fxdiv</item>
      <item>fxdiv0-and-mod0</item>
      <item>fxdiv0</item>
      <item>fxeven?</item>
      <item>fxfirst-bit-set</item>
      <item>fxif</item>
      <item>fxior</item>
      <item>fxlength</item>
      <item>fxmax</item>
      <item>fxmin</item>
      <item>fxmod</item>
      <item>fxmod0</item>
      <item>fxnegative?</item>
      <item>fxnot</item>
      <item>fxodd?</item>
      <item>fxpositive?</item>
      <item>fxreverse-bit-field</item>
      <item>fxrotate-bit-field</item>
      <item>fxxor</item>
      <item>fxzero?</item>
      <item>gcd</item>
      <item>generate-temporaries</item>
      <item>get-bytevector-all</item>
      <item>get-bytevector-n!</item>
      <item>get-bytevector-n</item>
      <item>get-bytevector-some</item>
      <item>get-char</item>
      <item>get-datum</item>
      <item>get-line</item>
      <item>get-string-all</item>
      <item>get-string-n!</item>
      <item>get-string-n</item>
      <item>get-u8</item>
      <item>greatest-fixnum</item>
      <item>guard</item>
      <item>har-ci&lt;?</item>
      <item>hashtable-clear!</item>
      <item>hashtable-contains?</item>
      <item>hashtable-copy</item>
      <item>hashtable-delete!</item>
      <item>hashtable-entries</item>
      <item>hashtable-equivalence-function</item>
      <item>hashtable-hash-function</item>
      <item>hashtable-keys</item>
      <item>hashtable-mutable?</item>
      <item>hashtable-ref</item>
      <item>hashtable-set!</item>
      <item>hashtable-size</item>
      <item>hashtable-update!</item>
      <item>hashtable?</item>
      <item>identifier-syntax</item>
      <item>identifier?</item>
      <item>imag-part</item>
      <item>inexact-&gt;exact</item>
      <item>inexact?</item>
      <item>inexact</item>
      <item>infinite?</item>
      <item>input-port?</item>
      <item>integer-&gt;char</item>
      <item>integer-valued?</item>
      <item>integer?</item>
      <item>interaction-environment</item>
      <item>irritants-condition?</item>
      <item>lcm</item>
      <item>least-fixnum</item>
      <item>length</item>
      <item>lexical-violation?</item>
      <item>list-&gt;string</item>
      <item>list-&gt;vector</item>
      <item>list-ref</item>
      <item>list-sort</item>
      <item>list-tail</item>
      <item>list?</item>
      <item>list</item>
      <item>log</item>
      <item>magnitude</item>
      <item>make-assertion-violation</item>
      <item>make-eq-hashtable</item>
      <item>make-eqv-hashtable</item>
      <item>make-error</item>
      <item>make-hashtable</item>
      <item>make-irritants-condition</item>
      <item>make-lexical-violation</item>
      <item>make-message-condition</item>
      <item>make-no-infinities-violation</item>
      <item>make-no-nans-violation</item>
      <item>make-non-continuable-violation</item>
      <item>make-polar</item>
      <item>make-record-constructor-descriptor</item>
      <item>make-record-type-descriptor</item>
      <item>make-rectangular</item>
      <item>make-serious-condition</item>
      <item>make-string</item>
      <item>make-syntax-violation</item>
      <item>make-transcoder</item>
      <item>make-undefined-violation</item>
      <item>make-variable-transformer</item>
      <item>make-vector</item>
      <item>make-violation</item>
      <item>make-warning</item>
      <item>make-who-condition</item>
      <item>map</item>
      <item>max</item>
      <item>member</item>
      <item>memp</item>
      <item>memq</item>
      <item>memv</item>
      <item>message-condition?</item>
      <item>min</item>
      <item>mod</item>
      <item>mod0</item>
      <item>modulo</item>
      <item>nan?</item>
      <item>native-endianness</item>
      <item>native-eol-style</item>
      <item>native-transcoder</item>
      <item>negative?</item>
      <item>newline</item>
      <item>no-infinities-violation?</item>
      <item>no-nans-violation?</item>
      <item>non-continuable-violation?</item>
      <item>not</item>
      <item>null-environment</item>
      <item>null?</item>
      <item>number-&gt;string</item>
      <item>number->string</item>
      <item>number?</item>
      <item>numerator</item>
      <item>odd?</item>
      <item>pair?</item>
      <item>partition</item>
      <item>peek-char</item>
      <item>port?</item>
      <item>positive?</item>
      <item>procedure?</item>
      <item>quotient</item>
      <item>rational-valued?</item>
      <item>rational?</item>
      <item>rationalize</item>
      <item>read-char</item>
      <item>read</item>
      <item>real-&gt;flonum</item>
      <item>real-part</item>
      <item>real-valued?</item>
      <item>real?</item>
      <item>record-accessor</item>
      <item>record-constructor-descriptor</item>
      <item>record-constructor</item>
      <item>record-field-mutable?</item>
      <item>record-mutator</item>
      <item>record-predicate</item>
      <item>record-rtd</item>
      <item>record-type-descriptor?</item>
      <item>record-type-descriptor</item>
      <item>record-type-field-names</item>
      <item>record-type-generative?</item>
      <item>record-type-name</item>
      <item>record-type-opaque?</item>
      <item>record-type-parent</item>
      <item>record-type-sealed?</item>
      <item>record-type-uid</item>
      <item>record?</item>
      <item>remainder</item>
      <item>remove</item>
      <item>remp</item>
      <item>remq</item>
      <item>remv</item>
      <item>reverse</item>
      <item>round</item>
      <item>serious-condition?</item>
      <item>set-car!</item>
      <item>set-cdr!</item>
      <item>set-port-position!</item>
      <item>simple-conditions</item>
      <item>sin</item>
      <item>sqrt</item>
      <item>string-&gt;bytevector</item>
      <item>string-&gt;list</item>
      <item>string-&gt;number</item>
      <item>string-&gt;symbol</item>
      <item>string-&gt;utf16</item>
      <item>string-&gt;utf32</item>
      <item>string-&gt;utf8</item>
      <item>string-append</item>
      <item>string-ci-hash</item>
      <item>string-ci&gt;?</item>
      <item>string-ci&gt;=?</item>
      <item>string-ci&lt;?</item>
      <item>string-ci&lt;=?</item>
      <item>string-ci=?</item>
      <item>string-copy</item>
      <item>string-count</item>
      <item>string-downcase</item>
      <item>string-fill!</item>
      <item>string-foldcase</item>
      <item>string-hash</item>
      <item>string-length</item>
      <item>string-normalize-nfc</item>
      <item>string-normalize-nfd</item>
      <item>string-normalize-nfkc</item>
      <item>string-normalize-nfkd</item>
      <item>string-ref</item>
      <item>string-set!</item>
      <item>string-titlecase</item>
      <item>string-upcase</item>
      <item>string?</item>
      <item>string&gt;?</item>
      <item>string&gt;=?</item>
      <item>string&lt;?</item>
      <item>string&lt;=?</item>
      <item>string</item>
      <item>string=?</item>
      <item>substring</item>
      <item>symbol-&gt;string</item>
      <item>symbol-hash</item>
      <item>symbol?</item>
      <item>symbol=?</item>
      <item>syntax-&gt;datum</item>
      <item>syntax-violation-form</item>
      <item>syntax-violation-subform</item>
      <item>syntax-violation?</item>
      <item>syntax-violation</item>
      <item>syntax</item>
      <item>tan</item>
      <item>textual-port?</item>
      <item>transcoded-port</item>
      <item>transcoder-codec</item>
      <item>transcoder-eol-style</item>
      <item>transcoder-error-handling-mode</item>
      <item>truncate</item>
      <item>u8-list-&gt;bytevector</item>
      <item>uint-list-&gt;bytevector</item>
      <item>undefined-violation?</item>
      <item>values</item>
      <item>vector-&gt;list</item>
      <item>vector-&gt;listlist->vector</item>
      <item>vector-fill!</item>
      <item>vector-length</item>
      <item>vector-ref</item>
      <item>vector-set!</item>
      <item>vector-sort!</item>
      <item>vector-sort</item>
      <item>vector?</item>
      <item>vector</item>
      <item>violation?</item>
      <item>warning?</item>
      <item>who-condition?</item>
      <item>with-exception-handler</item>
      <item>with-input-from-file</item>
      <item>with-output-to-file</item>
      <item>with-syntax</item>
      <item>write-char</item>
      <item>write</item>
      <item>zero?</item>
    </list>
    <contexts>
      <context name="Level0" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets1" context="Level1" char="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="'" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="`" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="#" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="@" char1="("/>
        <IncludeRules context="Default"/>
      </context>

      <context name="Default" attribute="Normal" lineEndContext="#stay">
        <DetectSpaces/>
        <DetectChar attribute="Comment" context="hash" char="#" lookAhead="1"/>
        <DetectChar attribute="Comment" context="semicolon" char=";" lookAhead="1"/>
        <DetectChar attribute="String" context="String" char="&quot;"/>
        <AnyChar attribute="Other Brackets" context="#stay" String="{}[]"/>
        <keyword attribute="Keyword" context="#stay" String="builtins"/>
        <keyword attribute="Definition" context="function_decl" String="syntax"/>
        <keyword attribute="Operator" context="#stay" String="operators"/>
        <RegExpr attribute="Normal" context="#stay" String="&symbol;"/>
        <RegExpr attribute="Float" context="#stay" String="[0-9]*+\.[0-9]++(e[+-]?[0-9]++)?|[0-9]++e[+-]?[0-9]++"/>
        <RegExpr attribute="Decimal" context="#stay" String="[0-9]++"/>
      </context>

      <context name="semicolon" attribute="Comment" lineEndContext="#pop">
      </context>

      <context name="hash" attribute="Normal" lineEndContext="#stay">
        <Detect2Chars attribute="Decimal" context="#pop" char="#" char1="t"/>
        <Detect2Chars attribute="Decimal" context="#pop" char="#" char1="T"/>
        <Detect2Chars attribute="Decimal" context="#pop" char="#" char1="f"/>
        <Detect2Chars attribute="Decimal" context="#pop" char="#" char1="F"/>
        <Detect2Chars attribute="Char" context="#pop!Char" char="#" char1="\"/>
        <Detect2Chars attribute="Comment" context="#pop!MultiLineGuileCommentOrExtension" char="#" char1="!" lookAhead="1"/>

        <DetectChar attribute="Normal" context="#pop" char="#"/>
      </context>

      <context name="Char" attribute="Char" lineEndContext="#pop">
        <DetectChar attribute="Char" context="HexChar" char="x"/>
        <keyword attribute="Char" context="#pop" String="characters" insensitive="1"/>
        <RegExpr attribute="Char" context="#pop" String=".(?!\w)"/>
        <RegExpr attribute="Error" context="#pop" String="\w+|."/>
      </context>
      <context name="HexChar" attribute="Char" lineEndContext="#pop#pop">
        <RegExpr attribute="Char" context="#pop#pop" String="[0-9a-fA-F]+"/>
      </context>

      <context name="MultiLineGuileCommentOrExtension" attribute="Comment" lineEndContext="#stay">
        <RegExpr attribute="Extension" context="#pop" String="#!\w+"/>
      </context>

      <context name="String" attribute="String" lineEndContext="#stay">
        <DetectChar attribute="String" context="#pop" char="&quot;"/>
        <DetectChar attribute="Char" context="EscapeString" char="\"/>
      </context>
      <context name="EscapeString" attribute="Char" lineEndContext="#pop" fallthroughContext="#pop">
        <AnyChar attribute="Char" context="#pop" String="abfnrtv&quot;\"/>
        <RegExpr attribute="Char" context="#pop" String="[xXu][0-9a-fA-F]+;|\\[0-7]{3}|(?:[MC]-|\^)?."/>
      </context>

      <context name="function_decl" attribute="Function" lineEndContext="#stay">
        <RegExpr attribute="Function" context="#pop" String="\s*[A-Za-z0-9-!$%&quot;*/:&lt;=>?~_^+.@]*\s*"/>
      </context>

      <context name="Level1" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets2" context="Level2" char="("/>
        <Detect2Chars attribute="Brackets2" context="Level2" char="'" char1="("/>
        <Detect2Chars attribute="Brackets2" context="Level2" char="`" char1="("/>
        <Detect2Chars attribute="Brackets2" context="Level2" char="#" char1="("/>
        <Detect2Chars attribute="Brackets2" context="Level2" char="@" char1="("/>
        <DetectChar attribute="Brackets1" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
      <context name="Level2" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets3" context="Level3" char="("/>
        <Detect2Chars attribute="Brackets3" context="Level3" char="'" char1="("/>
        <Detect2Chars attribute="Brackets3" context="Level3" char="`" char1="("/>
        <Detect2Chars attribute="Brackets3" context="Level3" char="#" char1="("/>
        <Detect2Chars attribute="Brackets3" context="Level3" char="@" char1="("/>
        <DetectChar attribute="Brackets2" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
      <context name="Level3" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets4" context="Level4" char="("/>
        <Detect2Chars attribute="Brackets4" context="Level4" char="'" char1="("/>
        <Detect2Chars attribute="Brackets4" context="Level4" char="`" char1="("/>
        <Detect2Chars attribute="Brackets4" context="Level4" char="#" char1="("/>
        <Detect2Chars attribute="Brackets4" context="Level4" char="@" char1="("/>
        <DetectChar attribute="Brackets3" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
      <context name="Level4" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets5" context="Level5" char="("/>
        <Detect2Chars attribute="Brackets5" context="Level5" char="'" char1="("/>
        <Detect2Chars attribute="Brackets5" context="Level5" char="`" char1="("/>
        <Detect2Chars attribute="Brackets5" context="Level5" char="#" char1="("/>
        <Detect2Chars attribute="Brackets5" context="Level5" char="@" char1="("/>
        <DetectChar attribute="Brackets4" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
      <context name="Level5" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets6" context="Level6" char="("/>
        <Detect2Chars attribute="Brackets6" context="Level6" char="'" char1="("/>
        <Detect2Chars attribute="Brackets6" context="Level6" char="`" char1="("/>
        <Detect2Chars attribute="Brackets6" context="Level6" char="#" char1="("/>
        <Detect2Chars attribute="Brackets6" context="Level6" char="@" char1="("/>
        <DetectChar attribute="Brackets5" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
      <context name="Level6" attribute="Normal" lineEndContext="#stay">
        <DetectChar attribute="Brackets1" context="Level1" char="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="'" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="`" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="#" char1="("/>
        <Detect2Chars attribute="Brackets1" context="Level1" char="@" char1="("/>
        <DetectChar attribute="Brackets6" context="#pop" char=")"/>
        <IncludeRules context="Default"/>
      </context>
    </contexts>
    <itemDatas>
      <itemData name="Normal"      defStyleNum="dsNormal"/>
      <itemData name="Keyword"     defStyleNum="dsKeyword"/>
      <itemData name="Definition"  defStyleNum="dsExtension"/>
      <itemData name="Operator"    defStyleNum="dsOperator"/>
      <itemData name="Function"    defStyleNum="dsFunction"/>
      <itemData name="Decimal"     defStyleNum="dsDecVal"/>
      <itemData name="Float"       defStyleNum="dsDecVal"/>
      <itemData name="Char"        defStyleNum="dsChar"/>
      <itemData name="String"      defStyleNum="dsString"/>
      <itemData name="Comment"     defStyleNum="dsComment"/>
      <itemData name="Extension"   defStyleNum="dsExtension"/>
    </itemDatas>
  </highlighting>
  <general>
    <keywords casesensitive="1" weakDeliminator="-+*?!&lt;&gt;=/:.,\&amp;" additionalDeliminator="&quot;;#"/>
  </general>
</language>
